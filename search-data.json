[
    
    
    
        
            {
                "id": 0,
                "href": "https://coder-shin.github.io/post/%EB%B0%98%EB%B3%B5%EB%AC%B8loop/",
                "title": "반복문(loop)",
                "section": "post",
                "date" : "2023.02.16",
                "body": "세 줄 요약 개요 상세 용어 설명 나의 해석 반복문은 특정 횟수(for), 특정 조건(while)을 달성할 때 까지 \u0026lsquo;반복\u0026rsquo;하는 문(statement)이다.\n각종 설명 [[조건문(conditional statement)]]{조건문}에는 if문, switch문이 있고 반복문에는 for문, while문, do-while문이 있다. 제어문 블록이 실행 실행 완료되었을 경우 다시 제어문 처음으로 돌아갈지, 아니면 제어문 블록을 빠져나와 정상 흐름으로 다시 돌아올지는 어떤 제어문을 사용하는냐에 달려 있다. [[조건문(conditional statement)]]{조건문}일 경우는 정상 흐름으로 돌아오지만, 반복문일 경우는 제어문 처음으로 다시 되돌아가 반복 실행한다. (이것이 자바다[1판] p.108)\n팁 "
            }
    
        ,
            {
                "id": 1,
                "href": "https://coder-shin.github.io/post/%EC%A1%B0%EA%B1%B4%EB%AC%B8conditional-statement/",
                "title": "조건문(conditional statement)",
                "section": "post",
                "date" : "2023.02.16",
                "body": "세 줄 요약 개요 상세 용어 설명 나의 해석 조건문은 \u0026lsquo;조건\u0026rsquo;에 따라 코드의 실행을 취사선택 할 수 있게 해주는 문(statement)이다.\n각종 설명 조건문에는 if문, switch문이 있고 [[반복문(loop)]]{반복문}에는 for문, while문, do-while문이 있다. 제어문 블록이 실행 실행 완료되었을 경우 다시 제어문 처음으로 돌아갈지, 아니면 제어문 블록을 빠져나와 정상 흐름으로 다시 돌아올지는 어떤 제어문을 사용하는냐에 달려 있다. 조건문일 경우는 정상 흐름으로 돌아오지만, [[반복문(loop)]]{반복문}일 경우는 제어문 처음으로 다시 되돌아가 반복 실행한다. (이것이 자바다[1판] p.108)\n팁 "
            }
    
        ,
            {
                "id": 2,
                "href": "https://coder-shin.github.io/post/%EC%A0%9C%EC%96%B4%EB%AC%B8control-flow-statement/",
                "title": "제어문(control flow statement)",
                "section": "post",
                "date" : "2023.02.16",
                "body": "세 줄 요약 개요 상세 용어 설명 나의 해석 제어문은 코드의 흐름을 \u0026lsquo;제어\u0026rsquo;하는 문(statement)이다.\n각종 설명 실행 흐름을 개발자가 원하는 방향으로 바꿀 수 있도록 해주는 것이 흐름 제어문이다. 흐름 제어문을 간단히 제어문이라고 한다. \u0026hellip; 제어문의 종류는 [[조건문(conditional statement)]]{조건문}과 [[반복문(loop)]]{반복문}이 있는데, (이것이 자바다[1판] p.108)\n팁 "
            }
    
        ,
            {
                "id": 3,
                "href": "https://coder-shin.github.io/post/%EB%A6%AC%ED%84%B0%EB%9F%B4literal/",
                "title": "리터럴(literal)",
                "section": "post",
                "date" : "2023.02.16",
                "body": "세 줄 요약 개요 상세 용어 설명 나의 해석 각종 설명 소스 코드 내에서 직접 입력된 값을 리터럴이라고 부른다. (이것이 자바다[1판]) p.32\n팁 "
            }
    
        ,
            {
                "id": 4,
                "href": "https://coder-shin.github.io/post/%EB%B3%80%EC%88%98variable/",
                "title": "변수(variable)",
                "section": "post",
                "date" : "2023.02.16",
                "body": "세 줄 요약 변수의 이름은 반드시 명확하게 작성해라. 개요 하루에 반을 변수의 이름으로 고민하는 모든 이들을 위해 준비한 변수에 대한 문서\n상세 [[java]]{Java} 특징 변수는 선언된 블록 내에서만 사용이 가능하다. 변수는 문(statement)을 통해 만들어진 블록 내에서만 사용이 가능하다.\nif(true) { int insideBlockVariable = 10; System.out.println(insideBlockVariable); // 참조 가능 } System.out.println(insideBlockVariable); // 참조 불가! 명명법 필수 규칙 규칙 예 첫 번째 글자는 문자이거나 \u0026lsquo;$\u0026rsquo;, \u0026lsquo;_\u0026rsquo; 이어야 하고 숫자로 시작할 수 없다. 가능: person, $likeJquery, _underscore\n불가능: 123hello, #likeInsta 영어 대소문자가 구분 camelCase와camelcase는 다른 변수로 취급된다. 예약어는 변수명으로 사용 할 수 없다. 불가능: while, if 등 관례 규칙 예 첫 문자는 영어 소문자로 시작하며 camel case를 사용한다. hello, helloMyFriend 상수 변수의 이름은 pascal case를 사용해서 작성한다. final MAX_VALUE 용어 설명 나의 해석 변수란 하나의 값을 저장하기 위한 이름을 가진 공간.\n각종 설명 프로그램은 작업을 처라하는 과정에서 필요에 따라 데이터를 메모리에 저장한다. 이때 변수를 사용하는데, 변수(varialbe)는 값을 저장할 수 있는 메모리의 공간을 의미한다. \u0026hellip; 변수에는 복수 개의 값을 저장할 수 없고, 하나의 값만 저장할 수 있다.\n변수란, 하나의 값을 저장할 수 있는 메모리 공간이다.\n(이것이 자바다[1판]) p.30\n팁 "
            }
    
        ,
            {
                "id": 5,
                "href": "https://coder-shin.github.io/post/%EA%B0%81%EC%A2%85-%EC%9A%A9%EC%96%B4-%EB%AA%A8%EC%9D%8C/",
                "title": "각종 용어 모음",
                "section": "post",
                "date" : "2023.02.16",
                "body": "프로그래밍 관련 언어 [[변수(variable)]] [[상수(constant)]] [[리터럴(literal)]] [[제어문(control flow statement)]] [[조건문(conditional statement)]] [[반복문(loop)]]\n"
            }
    
        ,
            {
                "id": 6,
                "href": "https://coder-shin.github.io/post/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0data-structure/",
                "title": "자료구조(data structure)",
                "section": "post",
                "date" : "2023.02.15",
                "body": "세 줄 요약 자료구조를 잘 사용 할 수 있다면 적절한 장소와 적절한 상황에 알맞는 옷을 입은 것과도 같다. 개요 자료구조는 자료를 효율적으로 관리, 접근, 수정을 하기 위하여 자료를 구조적으로 표현하는 방식이다\n상세 팁 "
            }
    
        ,
            {
                "id": 7,
                "href": "https://coder-shin.github.io/post/book/",
                "title": "book",
                "section": "post",
                "date" : "2023.02.15",
                "body": "ACTIVE SQL 더 쉽게, 더 깊게[1판]\n분야: 데이터베이스 작가: 미크 저 / 김완섭 역 별점: 회독: 0 읽을 타이밍: 객체지향 사고 프로세스[5판]\n분야: 설계 작가: 맷 와이스펠드 저 / 박진수 역 별점: 회독: 0 읽을 타이밍: C언어로 쉽게 풀어쓴 자료구조[3판]\n분야: 자료구조 + 알고리즘 작가: 천인국, 공용해, 하상호 별점: 회독: 0 읽을 타이밍: 사용자를 생각하게 하지 마![2판]\n분야: UI/UX 작가: 스티브 크룩 저 / 이미령 역 별점: 회독: 0 읽을 타이밍: 이것이 자바다[1판]\n분야: 프로그래밍 언어 작가: 신용권 별점: 회독: 0 읽을 타이밍: TODO 설계 데이터베이스 프로그래밍 언어 UI/UX 마크업 언어 도구 사고(思考) 네트워크 OS 컴퓨터 자료구조 알고리즘 DONE 프로젝트가 서쪽으로 간 까닭은\n분야: 사고 작가: 다수의 작가 별점: 4 회독: 2 읽을 타이밍: 프로젝트가 잘못된 방향으로 가고 있는 것 같은 경우 함께 자라기\n분야: 사고 작가: 김창준 별점: 5 회독: 3 읽을 타이밍: 개인적으로 노력해서 기술적으로 상당한 레벨까지 도달했다고 느꼈을 때 대체 뭐가 문제야\n분야: 사고 작가: 제럴드 M. 와인버그 별점: 5 회독: 3 읽을 타이밍: 새로운 방식으로 생각하고 싶은 경우 그로스 해킹\n분야: 사고 작가: 라이언 홀리데이 별점: 4 회독: 2 읽을 타이밍: 어떠한 서비스를 만들고 싶은 경우 "
            }
    
        ,
            {
                "id": 8,
                "href": "https://coder-shin.github.io/post/javascript/",
                "title": "javascript",
                "section": "post",
                "date" : "2023.02.14",
                "body": "요약 다른 사람이 코딩을 잘하는지 확인하고 싶을 떄는 다른 사람이 작성한 JS 코드를 훔쳐보자. 개요 (아마) 아무거나 다 할 수 있을 것 같은 javascript(이하 js)에 대한 문서\n상세 팁 "
            }
    
        ,
            {
                "id": 9,
                "href": "https://coder-shin.github.io/post/home/",
                "title": "index",
                "section": "post",
                "date" : "2023.02.14",
                "body": "프로그래밍 언어(programming language) [[javascript]]{JavaScript} [[java]]{Java} 데이터베이스(database) [[database]]{Database} 컴퓨터 기초(computer basic) [[자료구조(data structure)]] [[각종 용어 모음]] 정보 [[book]] [[각종 사이트 모음]] "
            }
    
        ,
            {
                "id": 10,
                "href": "https://coder-shin.github.io/about/",
                "title": "코더 신씨",
                "section": "",
                "date" : "0001.01.01",
                "body": "Me 웹 개발자입니다. 하드웨어는 키보드에만 관심있습니다. 소프트웨어는 기본적으로 TUI를 선호합니다. 변하지 않는 지식을 배우기 위해 노력 중입니다. Skills 아래의 내용은 어디까지나 주관적인 판단입니다. Javascript =\u0026gt; 구글신 없이도 왠만한 질문은 다 대답할 수 있습니다. Java =\u0026gt; 구글신과 함께라면 잘 할 수 있습니다. SQL =\u0026gt; 구글신과 함께라도 모르는게 많습니다. Shell =\u0026gt; Shell은 나의 친구! Back-end =\u0026gt; 회사 사람들이 너무 잘해서, 오히려 모르는게 많습니다. Front-end =\u0026gt; 회사 사람들이 많이 질문해 주셔서, 여러 상황에 대응 가능합니다. Database =\u0026gt; 회사 사람들이 정말 너무 잘해서, 거의 모릅니다.(최근 공부 중 입니다.) UI/UX =\u0026gt; 회사 사람들 중 할 수 있는 사람이 없어서, 제가 공부 중 입니다. Blog 블로그의 모든 글은 WTFPL 라이선스 적용됩니다. 복사해서 다른 곳으로 옮기고 싶으면 마음껏 옮기세요. 틀린 내용이 있으면 지적 해주세요. "
            }
    
]
