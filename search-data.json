[
    
    
    
        
            {
                "id": 0,
                "href": "https://coder-shin.github.io/post/javascript-%ED%81%B4%EB%A6%BD%EB%B3%B4%EB%93%9C%EC%97%90-%EB%B3%B5%EC%82%AC%ED%95%98%EA%B8%B0/",
                "title": "javascript - 클립보드에 복사하기",
                "section": "post",
                "date" : "2022.03.05",
                "body": "우리의 성격이 굉장히 급한 사장님이 20분 안에 특정 내용을 복사 할 수 있는 버튼을 만들어 오라는 지시를 내렸다.\n20분 안에 어떻게 만드냐고 20분 동안 싸우는 게 타당하다고 보지만 여기 이 문서 확인하면 10분 만에 완벽하게 만들고 5분 동안 사장님의 욕을 하고 5분 동안 사직서를 낼 타이밍에 대해서 고민 할 수 있게 정리해 두었으니 참고하도록 하자!\ndom에서 clipboard에 복사하기 dom에서 javascript를 이용해 클립보드에 복사하기 위해서는 두 가지 방법이 있다. 첫 번째로는 execCommand를 사용하는 방법과 그리고 Clipboard API를 사용하는 방법이 있다. Clipboard API가 execCommand API에 비해 최신 API로 지원되지 않는 브라우저가 다수 존재한다. (지원 현황 확인하기)\nexecCommand와 Clipboard API의 차이점 mdn 문서에 아래의 문단이 존재한\n The difference between the two APIs is that document.execCommand this is analogous to the keyboard copy, cut, and paste actions – exchanging data between a webpage and clipboard – whereas navigator.clipboard writes and reads arbitrary data to and from the clipboard.\n 즉 execCommand를 이용한 방법은 키보드의 복사, 붙여넣기, 잘라내기를 실행시키는 것이고 Clipboard API는 키보드 이벤트를 이용하지 않고 직접 clipboard에 있는 내용을 수정하고 사용하는 점이 다르다.\nexecCommand Clipboard API가 지원되지 않는 브라우저에서도 무사히 작동할 수 있는 execCommand에 대해서 알아보자.\n※ deplicated 되었다고 나와 있지, Clipboard API를 지원하지 않는 브라우저에 대응이 필요한 경우 사용을 하도록 하자.\nexecCommand를 이용한 clipboard에 복사하는 함수 예시 function copyToClipboard(newClip) { const $tempElement = document.createElement(\u0026#39;textarea\u0026#39;); document.body.appendChild($tempElement); $tempElement.value = newClip; $tempElement.select(); // 모바일 브라우저 대응을 위해서 아래의 코드추가 필요  $tempElement.setSelectionRange(0, 9999); document.execCommand(\u0026#39;copy\u0026#39;); document.body.removeChild($tempElement); } Clipboard API Clipboard API는 execCommand와 다르게 지원되지 않는 브라우저가 있으므로 사용하기 전에 반드시 확인하고 사용하자.(지원 현황 확인하기)\nclipboardRead와 clipboardWirte 권한 확인하기 clipboard API를 사용하기 위해서는 mainfest.json내의 clipboardRead와 clipboardWirte의 권한이 설정되어 있어야만 사용할 수 있다. 권한의 확인은 아래의 코드를 사용한다.\nnavigator.permissions.query({name: \u0026#34;clipboard-write\u0026#34;}).then(result =\u0026gt; { if (result.state == \u0026#34;granted\u0026#34; || result.state == \u0026#34;prompt\u0026#34;) { // 권한이 설정되어 있으므로 사용 가능하다!  } }); Clipboard API를 이용한 clipboard에 복사하는 함수 예시 const copyToClipboard = (newClip) =\u0026gt; { navigator.clipboard.writeText(newClip) .then(() =\u0026gt; { // 성공한 경우의 처리  }) .catch(() =\u0026gt; { // 실패한 경우의 처리  }); } ※ 위의 함수를 사용하기 전, 반드시 권한을 확인하고 사용할 것\nclipboard.js 라이브러리를 이용하는 방법 clipboard.js 라이브러리를 이용하면 Clipboard API와 execCommand를 직접 사용할 필요 없이 간단하게 구현 가능하다. 또한 호환성 문제에 대한 고민도 사라지기에 가장 간편하게 구현하는 방법이라고 생각된다.\nclipboard.js 라이브러리 사용법 # clipboard를 설치 npm i clipboard 설치를 마친 후 data-clipboard-target를 사용해서 복사하고 싶은 대상을 간단하게 지정할 수 있다.\n\u0026lt;!-- 대상 --\u0026gt; \u0026lt;input id=\u0026#34;coder-shin-url\u0026#34; value=\u0026#34;https://coder-shin.github.io/\u0026#34;\u0026gt; \u0026lt;!-- 발동 버튼 --\u0026gt; \u0026lt;button data-clipboard-target=\u0026#34;#coder-shin-url\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;assets/clippy.svg\u0026#34; alt=\u0026#34;Copy to clipboard\u0026#34;\u0026gt; \u0026lt;/button\u0026gt; 더욱 자세한 사용 방법에 대해서는 clipboard.js를 참조하자.\nnode에서 clipboard에 복사하기 node를 이용해서 clipboard에 복사하는 방법은 clipboardy 라이브러리를 이용하는 방법이 가장 간단해 보였다.\nclipboardy 라이브러리 clipboardy 라이브러리를 사용하면 node에서 간편하게 clipboard로 복사할 수 있다.\nclipboardy 라이브러리 사용법 # clipboardy를 설치 npm i clipboardy 설치를 마친 후 writeSync와 readSync를 이용하면 node에서 간편하게 clipboard에 복사하기와 붙여넣기를 구현 가능해진다.\n// clipboardy를 import import clipboard from \u0026#39;clipboardy\u0026#39;; // 🦄을 clipboard에 복사 clipboard.writeSync(\u0026#39;🦄\u0026#39;); // clipboard에 있는 내용을 변수 unicorn에 담기 const unicorn = clipboard.readSync(); 결론 오늘도 코더 신씨는 복사 기능을 만들어 오라는 사장님의 기대에 부응했고 언제 사퇴를 해야 하는지에 대해 구체적인 계획도 세운 보람찬 하루였다.\n출처  Docs: Interact with the clipboard - mdn web docs Docs: Clipboard API - mdn web docs Docs: Document.execCommand() - mdn web docs Docs: sindresorhus/clipboardy - git repository Docs: clipboard.js  "
            }
    
        ,
            {
                "id": 1,
                "href": "https://coder-shin.github.io/post/javascript/",
                "title": "javascript",
                "section": "post",
                "date" : "2022.03.05",
                "body": "아무거나 다 할 수 있는 마법의 언어 javascript에 대한 인덱스\n하는 법(How to)  [[javascript - 클립보드에 복사하기]]  "
            }
    
        ,
            {
                "id": 2,
                "href": "https://coder-shin.github.io/post/git-gitignore/",
                "title": "git - gitignore",
                "section": "post",
                "date" : "2022.03.05",
                "body": "git을 사용해서 프로젝트를 진행하다 보면 아래와 같은 파일들이 생기기 마련이다.\n 보안상 git을 이용해서 관리하면 안 되는 파일들 프로젝트랑 무관한 자신의 에디터 파일 설정  이와 같은 상황에서 실수로 git add를 통해 git에 올려 버린 경우 에디터 파일의 설정은 큰 문제가 되지 않지만(같은 에디터를 쓰는 사람들은 자신의 설정이랑 충돌이 일어나 조금 화가 나는 정도) 보안상 문제가 되는 파일을 올린 경우에는 실질적으로 큰 피해를 볼 가능성이 생기게 된다.\n.gitignore은 위와 같은 상황을 방지하기 위해서 사용 할 수 있는 방법으로, .gitignore을 이용하면 git을 이용해서 관리하고 싶지 않은 파일을 지정해서 원치 않는 파일이 commit이 되는 상황을 방지 할 수 있다.\n기본적인 사용법 git을 사용하고 있는 프로젝트의 루트 디렉토리에 .gitignore 파일을 생성한 뒤 그 파일에 제외 대상이 될 파일을 한 줄씩 작성하면 된다. 와일드카드 지정도 가능하므로 특정 폴더의 특정 파일을 제외하는 것도 가능하다.\n특정 파일을 제외하기 .gitignore를 좋아하는 편집기 열고 대상을 작성\n# file_name1.js인 모든 파일이 대상이 된다. file_name1.js # file_name2.js인 모든 파일이 대상이 된다. file_name2.js 특정 경로에 있는 파일 .gitignore를 좋아하는 편집기 열고 특정 경로에 있는 대상을 작성\n# root에 존재하는 file_name1.js /file_name1.js # some_directory에 존재하는 file_name1 /some_directory/file_name1.js 특정 디렉터리에 있는 파일들 모두 .gitignore를 좋아하는 편집기 열고 특정 경로를 작성\n# 대표적인 gitignore 대상으로 이처럼 지정하면 node_modules 디렉터리에 있는 # 모든 파일이 제외된다. node_modules/ 특정 확장자를 지정 .gitignore를 좋아하는 편집기 열고 *.{파일명}을 작성\n# .cache로 끝나는 모든 파일이 대상이 된다. *.cache # .temp로 끝나는 모든 파일이 대상이 된다. *.temp 예외 지정 .gitignore를 좋아하는 편집기 열고 !{파일명} 작성\n# .temp로 끝나는 모든 파일이 대상이 된다. *.temp # 단 hello.temp는 예외로 git위에서 관리한다. !hello.temp 주석 사용해서 설명 추가하기 .gitignore를 좋아하는 편집기 열고 \u0026lsquo;#{주석내용}\u0026rsquo; 작성\n# 나의 소중한 vim 설정입니다. # 누구에게도 공개하고 싶지 않습니다. .lvimrc 트러블 슈팅 기존에 관리하고 있던 대상이 .gitignore 적용을 받지 않는 경우 아래와 같은 상황이 있을 수 있다.\n 처음에는 관리가 필요한줄 알았는데 특별히 관리를 해줄 필요가 없는 경우 그냥 잘못 올렸을 경우  위와 같은 상황을 인식한 뒤 gitignore에 추가를 한 뒤에 확인을 해보면 여전히 git에서 관리를 하고 있다. 원인은 git의 캐시가 문제다. 해결 하기 위해서는아래와 같은 대응이 필요로 한다.\n# cache를 삭제 git rm -r --cached . # gitignore의 대상 이외의 파일을 stage에 올려준다. git add . # message로 gitignore 적용 등을 넣어주자 git commit 출처  bok: pro git  "
            }
    
        ,
            {
                "id": 3,
                "href": "https://coder-shin.github.io/post/git/",
                "title": "git",
                "section": "post",
                "date" : "2022.03.05",
                "body": "문서를 관리하는 최고 존엄 도구 git에 대한 인덱스\n하는법(How to)  [[git - gitignore]]  "
            }
    
        ,
            {
                "id": 4,
                "href": "https://coder-shin.github.io/post/home/",
                "title": "index",
                "section": "post",
                "date" : "2022.03.05",
                "body": "블로그 전체의 인덱스\n언어(Language)  [[javascript]]  도구(Tool)  [[git]]  "
            }
    
        ,
            {
                "id": 5,
                "href": "https://coder-shin.github.io/about/",
                "title": "나는 누구이며 여기는 어디인가",
                "section": "",
                "date" : "0001.01.01",
                "body": "Me  외노자 키보드 좋아함 사용하는 도구 vim, emacs, intellij 셋 다 좋아함 사용하는 운영체제 mac, arch 둘 다 좋아함 키보드에서 손이 멀어지는게 귀찮아서 주로 터미널에서 작업 여가 시간에는 운동을 하던가 외국어 공부를 하던가 블로그 글 작성을 함  Blog  개인 위키에 적어둔 내용을 공유할 목적으로 만든 블로그 풍문에 hugo가 가볍고 좋다고 해서 hugo로 선택 index에서 전체의 분류 참고 search에서 검색 기본적인 내용은 공부한 내용 정리 + 일을 하다가 몰랐던 내용 정리 모든 출처는 기재하는 것을 원칙(일본어 문서, 영어 문서도 기재) 출처 종류는 Book(책), Docs(인터넷 문서), Movi(동영상)으로 구분 Movi는 다른 요소와 글자수를 맞추기 위해 의도적으로 e를 제거 내용의 일부를 복사해서 사용 가능(링크를 반드시 남겨주세요.) 모든 내용을 복사해서 사용 금지(링크를 이용해주세요.)  "
            }
    
]
