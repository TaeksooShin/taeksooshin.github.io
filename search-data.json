[
    
    
    
        
            {
                "id": 0,
                "href": "https://coder-shin.github.io/post/gitignore/",
                "title": "gitignore",
                "section": "post",
                "date" : "2022.03.05",
                "body": "git을 사용해서 프로젝트를 진행하다 보면 아래와 같은 파일들이 생기기 마련이다.\n 보안상 git을 이용해서 관리하면 안 되는 파일들 프로젝트랑 무관한 자신의 에디터 파일 설정  이와 같은 상황에서 실수로 git add를 통해 git에 올려 버린 경우 에디터 파일의 설정은 큰 문제가 되지 않지만(같은 에디터를 쓰는 사람들은 자신의 설정이랑 충돌이 일어나 조금 화가 나는 정도) 보안상 문제가 되는 파일을 올린 경우에는 실질적으로 큰 피해를 볼 가능성이 생기게 된다.\n.gitignore은 위와 같은 상황을 방지하기 위해서 사용 할 수 있는 방법으로, .gitignore을 이용하면 git을 이용해서 관리하고 싶지 않은 파일을 지정해서 원치 않는 파일이 commit이 되는 상황을 방지 할 수 있다.\n기본적인 사용법 git을 사용하고 있는 프로젝트의 루트 디렉토리에 .gitignore 파일을 생성한 뒤 그 파일에 제외 대상이 될 파일을 한 줄씩 작성하면 된다. 와일드카드 지정도 가능하므로 특정 폴더의 특정 파일을 제외하는 것도 가능하다.\n특정 파일을 제외하기 .gitignore를 좋아하는 편집기 열고 대상을 작성\n# file_name1.js인 모든 파일이 대상이 된다. file_name1.js # file_name2.js인 모든 파일이 대상이 된다. file_name2.js 특정 경로에 있는 파일 .gitignore를 좋아하는 편집기 열고 특정 경로에 있는 대상을 작성\n# root에 존재하는 file_name1.js /file_name1.js # some_directory에 존재하는 file_name1 /some_directory/file_name1.js 특정 디렉터리에 있는 파일들 모두 .gitignore를 좋아하는 편집기 열고 특정 경로를 작성\n# 대표적인 gitignore 대상으로 이처럼 지정하면 node_modules 디렉터리에 있는 # 모든 파일이 제외된다. node_modules/ 특정 확장자를 지정 .gitignore를 좋아하는 편집기 열고 *.{파일명}을 작성\n# .cache로 끝나는 모든 파일이 대상이 된다. *.cache # .temp로 끝나는 모든 파일이 대상이 된다. *.temp 예외 지정 .gitignore를 좋아하는 편집기 열고 !{파일명} 작성\n# .temp로 끝나는 모든 파일이 대상이 된다. *.temp # 단 hello.temp는 예외로 git위에서 관리한다. !hello.temp 주석 사용해서 설명 추가하기 .gitignore를 좋아하는 편집기 열고 \u0026lsquo;#{주석내용}\u0026rsquo; 작성\n# 나의 소중한 vim 설정입니다. # 누구에게도 공개하고 싶지 않습니다. .lvimrc 트러블 슈팅 기존에 관리하고 있던 대상이 .gitignore 적용을 받지 않는 경우 아래와 같은 상황이 있을 수 있다.\n 처음에는 관리가 필요한줄 알았는데 특별히 관리를 해줄 필요가 없는 경우 그냥 잘못 올렸을 경우  위와 같은 상황을 인식한 뒤 gitignore에 추가를 한 뒤에 확인을 해보면 여전히 git에서 관리를 하고 있다. 원인은 git의 캐시가 문제다. 해결 하기 위해서는아래와 같은 대응이 필요로 한다.\n# cache를 삭제 git rm -r --cached . # gitignore의 대상 이외의 파일을 stage에 올려준다. git add . # message로 gitignore 적용 등을 넣어주자 git commit 출처  bok: pro git  "
            }
    
        ,
            {
                "id": 1,
                "href": "https://coder-shin.github.io/post/git/",
                "title": "git",
                "section": "post",
                "date" : "2022.03.05",
                "body": "문서를 관리하는 최고 존엄 도구 git에 대한 인덱스\n하는법(How to)  [[gitignore]]  "
            }
    
        ,
            {
                "id": 2,
                "href": "https://coder-shin.github.io/post/home/",
                "title": "index",
                "section": "post",
                "date" : "2022.03.05",
                "body": "블로그 전체의 인덱스\n도구(Tool)  [[git]]  "
            }
    
        ,
            {
                "id": 3,
                "href": "https://coder-shin.github.io/about/",
                "title": "나는 누구이며 여기는 어디인가",
                "section": "",
                "date" : "0001.01.01",
                "body": "Me  외노자 키보드 좋아함(일본어 배열 키보드 + 트랙포인트가 있는 키보드 선호) 사용하는 도구 vim, emacs, intellij 셋 다 좋아함 사용하는 운영체제 mac, arch 둘 다 좋아함 키보드에서 손이 멀어지는게 귀찮아서 주로 터미널에서 작업 여가 시간에는 운동을 하던가 외국어 공부를 하던가 블로그 글 작성을 함  Blog  개인 위키에 적어둔 내용을 공유할 목적으로 만든 블로그 풍문에 hugo가 가볍고 좋다고 해서 hugo로 선택 index에서 전체의 분류 참고 search에서 검색 기본적인 내용은 공부한 내용 정리 + 일을 하다가 몰랐던 내용 정리 되도록이면 모든 출처는 기재하는 것을 원칙(일본어라 영어문서도 기재) 출처 종류는 bok(책), doc(인터넷 문서), mov(동영상)으로 구분 bok는 뒤의 요소와 글자수를 맞추기 위해 의도적으로 o를 하나 제거  "
            }
    
]
