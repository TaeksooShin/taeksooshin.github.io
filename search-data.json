[
    
    
    
        
            {
                "id": 0,
                "href": "https://coder-shin.github.io/post/%EC%88%9C%ED%99%98recursion/",
                "title": "순환(recursion)",
                "section": "post",
                "date" : "2023.02.23",
                "body": "용어 설명 나의 해석 큰 문제를 작은 문제로 나누어서 해결하는 방법\n각종 설명 순환(recursion)이란 어떤 알고리즘이나 함수가 자기 자신을 호출하여 문제를 해결하는 프로그래밍 기법이다. (C언어로 쉽게 풀어쓴 자료구조(3판))\n장단점 장점 [[[반복문(loop)]]]을 사용하면 복잡해지는 문제들을 간단하게 해결 할 수 있다. 문제의 정의가 순환적으로 되어 있는 경우 순환으로 작성하는 것이 훨씬 더 간결하게 코드를 작성 할 수 있다. 단점 실행시간이 오래걸린다. 메모리 사용에 있어서 비효율적이다. 꼬리 순환과 머리 순환 꼬리 순환(tail recursion) return n * factorial(n - 1); 머리 순환(head recursion) return factorial(n - 1) * n; 팁 순환은 본질적으로 순환(recursive)인 문제나 그러한 자료구조를 다루는 프로그램에 적합 머리 순환(head recursion)의 경우나 여러 군데에서 자기 자신을 호출하는 경우(multi recursion)는 쉽게 반복전인 코드로 바꿀 수 없다. 대부분 [[반복문(loop)]]로 대처할 수 있다. "
            }
    
        ,
            {
                "id": 1,
                "href": "https://coder-shin.github.io/post/javascript%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4%EC%84%9C-%EC%82%AC%EC%9A%A9%EC%9E%90%EA%B0%80-%EC%96%B4%EB%96%A4-%EB%94%94%EB%B0%94%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C-%EC%A0%91%EC%86%8D%ED%95%98%EA%B3%A0-%EC%9E%88%EB%8A%94%EC%A7%80-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0/",
                "title": "javascript를 이용해서 사용자가 어떤 디바이스를 사용해서 접속하고 있는지 알아보기",
                "section": "post",
                "date" : "2023.02.17",
                "body": "navigator.userAgent를 이용하는 방법 navigator.userAgent는 user agent를 string으로 보관하고 있는 읽기 전용 property이다. 이를 이용해서 사용자가 pc에서 페이지를 열람하고 있는가, 스마트폰에서 페이지를 열람하고 있는가를 확인할 수 있다.\nconst isSmartPhone = (): boolean =\u0026gt; { return /Android|iPhone/i.test(navigator.userAgent); }; 간편하게 이용할 수 있는 반면 아래와 같은 단점이 있다.\n사용자가 navigator.userAgent를 위조가 가능하다. 호환성이 좋지 않다. (참고 - https://caniuse.com/mdn-api_navigator_useragentdata) 특히 호환성이 굉장히 좋지 않기 때문에 사용하기 전에 검토를 해볼 필요가 있다.\ndetectmobilebrowsers에서 제공하는 스크립트를 이용하는 방법. http://detectmobilebrowsers.com/ 는 페이지를 어떠한 환경에서 작동하고 있는지 감지 할 수 있는 스크립트를 제공하는 사이트이다.\n편하게 스크립트를 받아서 자신의 서비스에 넣어주면 편리하게 사용가능하다.\n단 몇몇 기기에서 작동이 되지 않는다는 제보도 있기 때문에 100% 신용은 금물이다.\n"
            }
    
        ,
            {
                "id": 2,
                "href": "https://coder-shin.github.io/post/data-type/",
                "title": "데이터형(data type)",
                "section": "post",
                "date" : "2023.02.17",
                "body": "[[database]]{데이터베이스}에서의 데이터형 INTEGER형 정수를 넣기 위한 데이터형. 소수는 넣을 수 없다.\nCHAR형 CHARACTER(문자)의 약자.\n문자열을 넣기 위한 데이터형.\nCHAR(10), CHAR(1000)과 같이 괄호를 이용해서 열 안에 넣을 수 있는 문자열의 최대 길이를 지정 가능.\n고정 문자열이다. 고정 문자열에 관한 예를 들면, CHAR(10)을 지정한 열에 \u0026lsquo;hello\u0026rsquo;를 넣었다고 가정하자. 이때 열에는 \u0026lsquo;hello \u0026lsquo;(hello + 공백 5자)가 저장된다.\nVARCHAR형 VARING(가변) CHARACTER(문자)의 약자.\n문자열을 넣기 위한 데이터형.\n가변 문자열이다. 즉 CHAR형과 다르게 최대 길이보다 작은 공간을 공백으로 채우지 않는다.\nDATE형 날짜(년월일)를 저장하는 데이터형(날짜형)이다.\n"
            }
    
        ,
            {
                "id": 3,
                "href": "https://coder-shin.github.io/post/dcl/",
                "title": "DCL",
                "section": "post",
                "date" : "2023.02.17",
                "body": "용어 설명 나의 해석 DCL(Data Control Language)은 데이터베이스에 관한 권한을 제어하는 SQL문이다.\nCOMMIT, ROLLBACK은 TCL(Transaction Control Language)이라고 분류하기도 한다.\n각종 설명 DCL(데이터 제어 언어)은 데이터베이스에서 처리한 변경 내용을 확정하거나 취소하기 위한 것이다. 또한, RDBMS 사용자에게 처리 권한을 부여하기도 한다.\n(SQL 더 쉽게 더 깊게 p.15)\n종류 COMMIT : 변경 내용 확정 ROLLBACK : 변경 내용 취소 GRANT : 권한 부여 REVOKE : 권한 제거\n"
            }
    
        ,
            {
                "id": 4,
                "href": "https://coder-shin.github.io/post/dml/",
                "title": "DML",
                "section": "post",
                "date" : "2023.02.17",
                "body": "용어 설명 나의 해석 DML(Data Manipulation Language)은 테이블의 행을 조작하는 SQL문이다.\n특징으로는 WHERE문을 사용 할 수 있다.\n각종 구문 DML(데이터 조작 언어)은 테이블의 행을 검색하거나 변경하기 위한 것이다.\n(SQL 더 쉽게 더 깊게 p.15)\n종류 INSERT : 등록 SELECT : 조회 UPDATE : 갱신 DELETE : 삭제\n상세 설명 SELECT SELECT 문은 테이블에서 데이터를 꺼낼 때 사용하는 [[SQL]]문이다. 기본 구문은 아래와 같다.\nSELECT \u0026lt;열명\u0026gt;, ... FROM \u0026lt;테이블명\u0026gt;; SELECT문에 대한 각종 구문 SELECT 문은 많은 SQL 문 중에서도 가장 자주 사용되며 가장 기본이 되는 구문이다. SELECT 문을 마스터하는 것은 곧 SQL 문 전체를 마스터하는 것이라 해도 과언이 아니다. (SQL 더 쉽게 더 깊게 p.37)\n"
            }
    
        ,
            {
                "id": 5,
                "href": "https://coder-shin.github.io/post/ddl/",
                "title": "DDL",
                "section": "post",
                "date" : "2023.02.17",
                "body": "용어 설명 나의 해석 DDL(Data Defintion Language)은 데이터베이스 및 테이블을 생성, 삭제 하기 위해 사용하는 SQL문이다.\n특징으로는 WHERE문을 사용 할 수 없다.\n각종 설명 DDL(데이터 정의 언어)은 데이터를 저장하는 데이터베이스 및 테이블을 생성 삭제하기 위한 것이다.\n(SQL 더 쉽게 더 깊게 p.15)\n간략 설명 CREATE : 생성 DROP : 삭제 ALTER : 변경\n상세 설명 CREATE CREATE문은 데이터베이스, 테이블을 작성할 때 사용하는 [[SQL]]문이다. 기본 구문은 아래와 같다.\n데이터베이스를 생성하는 CREATE DATABASE문\nCREATE DATABASE \u0026lt;데이터베이스명\u0026gt; 테이블을 생성하는 CREATE TABLE문\nCREATE TABLE \u0026lt;테이블\u0026gt; (\u0026lt;열명1\u0026gt; \u0026lt;데이터형\u0026gt; \u0026lt;열의 제약\u0026gt;, \u0026lt;열명2\u0026gt; \u0026lt;데이터형\u0026gt; \u0026lt;열의 제약\u0026gt;, \u0026lt;열명3\u0026gt; \u0026lt;데이터형\u0026gt; \u0026lt;열의 제약\u0026gt;, ... \u0026lt;테이블의 제약1\u0026gt;, \u0026lt;테이블의 제약2\u0026gt;, \u0026lt;테이블의 제약3\u0026gt;, ...); DROP DROP문은 테이블을 삭제 할 때 사용하는 [[SQL]]문이다. 기본 구문은 아래와 같다.\n테이블을 삭제하는 DROP TABLE문\nDROP TABLE \u0026lt;테이블명\u0026gt;; 명심해야하는 점은 \u0026lsquo;삭제한 데이터베이스, 테이블은 복구할 수 없다.\u0026rsquo; 반드시 조심해야한다.\nALTER ALTER문은 테이블의 정의를 변경하는 사용하는 [[SQL]]문이다.\n열 추가 테이블의 열을 추가할 때 사용하는 ALTER TABLE문\nALTER TABLE \u0026lt;테이블명\u0026gt; ADD COLUMN \u0026lt;열 정의\u0026gt;; 주의) Oracle과 SQL Server의 열을 추가하는 경우 COLUMN을 빼고 작성한다.\nOracle과 SQL Server에서의 테이블의 열을 추가할 때 사용하는 ALTER TABLE문\nALTER TABLE \u0026lt;테이블명\u0026gt; ADD \u0026lt;열 정의\u0026gt;; 열 삭제 테이블의 열을 삭제하는 ALTER TABLE 문\nALTER TABLE \u0026lt;테이블명\u0026gt; DROP COLUMN \u0026lt;열명\u0026gt;; 주의) Oracle에서 열을 삭제하는 경우 COLUMN을 빼고 작성한다.\nOracle에서 테이블의 열을 삭제하는 ALTER TABLE 문\nALTER TABLE \u0026lt;테이블명\u0026gt; DROP \u0026lt;열명\u0026gt;; 테이블 이름 변경 테이블의 이름 변경은 표준 SQL이 존재하지 않기 때문에 각 DBMS 마다 구문이 다르다. 각각의 구문은 아래와 같다.\nOracle, PostgreSQL ALTER TABLE \u0026lt;대상 테이블\u0026gt; RENAME TO \u0026lt;변경하고 싶은 이름\u0026gt;; DB2 RENAME TABLE \u0026lt;대상 테이블\u0026gt; TO \u0026lt;변경하고 싶은 이름\u0026gt;; SQL Server sp_rename \u0026#39;\u0026lt;대상 테이블\u0026gt;\u0026#39;, \u0026#39;\u0026lt;변경하고 싶은 이름\u0026gt;\u0026#39;; MySQL RENAME TABLE \u0026lt;대상 테이블\u0026gt; TO \u0026lt;변경하고 싶은 이름\u0026gt;; "
            }
    
        ,
            {
                "id": 6,
                "href": "https://coder-shin.github.io/post/sql/",
                "title": "SQL",
                "section": "post",
                "date" : "2023.02.17",
                "body": "SQL(Structured Query Language)란? 나의 해석 데이터베이스를 조작하기 위한 특정 도메인 언어.\n각종 설명 SQL(Structured Query Language)은 관계형 데이터베이스(이하, 데이터베이스)를 제어하기 위한 언어다.\n(SQL 더 쉽게 더 깊게 p.14)\nSQL문의 종류 SQL문의 종류는 세 가지로 분류한다.\n[[DDL]]{DDL(Data Defintion Language)} [[DML]]{DML(Data Manipulation Language)} [[DCL]]{DCL(Data Control Language)} 각각의 내용은 각가의 링크를 참조할 것.\n관련링크 [[DDL]]{DDL(Data Defintion Language)} [[DML]]{DML(Data Manipulation Language)} [[DCL]]{DCL(Data Control Language)} "
            }
    
        ,
            {
                "id": 7,
                "href": "https://coder-shin.github.io/post/dbms/",
                "title": "DBMS",
                "section": "post",
                "date" : "2023.02.17",
                "body": "DBMS란? 나의 해석 DBMS란 데이터베이스를 관리하는 컴퓨터 소프트웨어이다.\n각종 설명 [[database]]{데이터베이스}를 관리하는 컴퓨터 시스템을 데이터베이스 관리 시스템(Database Management System)이라 하고, 줄여서 DBMS라고도 한다.\n(SQL 더 쉽게 더 깊게 p.4)\nDBMS를 이용하는 이유 다수의 사람들과 데이터를 공유하기 쉽다. 대량의 데이터를 다루기 쉽다. 별도의 프로그래밍 기술이 필요하지 않다. 만일의 사고에 대응할 수 있다. 팁 데이터베이스랑 DBMS가 같은게 아닌가? 상호 교환적으로 사용되기도 하지만 명백하게 이야기하면 다르다. 아래의 인용문을 읽어보자.\n[[database]]{데이터베이스(DB)}와 DBMS는 자주 같은 의미로 사용되기도 한다. 이 책에서는 저장할 데이터 집합을 데이터베이스, 그것을 관리하는 시스템을 DBMS라고 구별한다.\n(SQL 더 쉽게 더 깊게 p.4)\n"
            }
    
        ,
            {
                "id": 8,
                "href": "https://coder-shin.github.io/post/%EC%88%98%ED%96%89%EC%8B%9C%EA%B0%84-%EC%B8%A1%EC%A0%95%EB%B0%A9%EB%B2%95/",
                "title": "수행시간 측정방법",
                "section": "post",
                "date" : "2023.02.16",
                "body": "각 언어별 사용법 [[c]]{C} clock() 함수 이용하기 #include \u0026lt;time.h\u0026gt; start = clock(); // 여기에 수행시간을 측정하고 싶은 코드 삽입 stop = clock(); double duration = (dobule)(stop - start) / CLOCKS_PER_SEC; clock() 함수는 호출 프로세스에 의하여 사용된 CPU 시간을 계산하는 함수 clock() 함수의 반환 단위는 CLOCKS_PER_SEC\ntime() 함수 이용하기 #include \u0026lt;time.h\u0026gt; start = time(NULL); // 여기에 수행시간을 측정하고 싶은 코드 삽입 stop = time(NULL); double duration = (double) difftime(stop, start); time() 함수는 초 단위로 측정된 시간을 반환한다.\n팁 수행시간 측정시 고려해야하는 것들 알고리즘을 비교할 때에는 동일한 하드웨어를 사용해서 측정을 해야한다. 비효율적인 프로그램이라도 슈퍼컴퓨터에서는 빠르게 동작 할 수 있으므로 동일한 하드웨러를 사용해야한다. 사용한 소프트 웨어를 동일하게 해야한다. 동일한 알고리즘이라도 C언어에서 작동하는 알고리즘과 Python에서 작동하는 알고리즘의 속도가 다를 수 있기 때문에 동일한 소프트웨어를 사용해야한다. 실험에 사용한 데이터와 다른 데이터를 사용한 경우 완전히 다른 결과가 나올 수 있다. 입력 자료의 개수가 적을 때에는 효율적이지만 개수가 많아지면 비효율적인 알고리즘이 있기 때문에 자료마다 다른 결과가 나온다. 이와 반대로 입력 자료가 적을 때에는 비효율적이지만 일정 개수를 넘으면 효율적으로 작동하는 알고리즘도 존재하기 때문이다. "
            }
    
        ,
            {
                "id": 9,
                "href": "https://coder-shin.github.io/post/c/",
                "title": "c",
                "section": "post",
                "date" : "2023.02.16",
                "body": "팁 [[수행시간 측정방법]] "
            }
    
        ,
            {
                "id": 10,
                "href": "https://coder-shin.github.io/post/database/",
                "title": "데이터베이스(database)",
                "section": "post",
                "date" : "2023.02.16",
                "body": "데이터베이스란? 나의 해석 각종 설명 이런 정보를 데이터로 저장하고, 컴퓨터를 사용해서 효율적으로 접근할 수 있도록 가공한 것을 데이터베이스(Database) 또는 줄여서 DB라고 한다.\n(SQL 더 쉽게 더 깊게 p.4)\n명명 규칙 데이터베이스나 테이블, 열 등의 이름으로 사용할 수 있는 문자는 세 가지\n영문자 숫자 언더바(_) 이름의 첫 글자는 반드시 영문이어야 한다.\n이름은 중복해서 사용해서는 안 된다.\n관련 링크 [[DBMS]] [[SQL]] [[data type]]{데이터형} "
            }
    
        ,
            {
                "id": 11,
                "href": "https://coder-shin.github.io/post/%EB%B0%98%EB%B3%B5%EB%AC%B8loop/",
                "title": "반복문(loop)",
                "section": "post",
                "date" : "2023.02.16",
                "body": "용어 설명 나의 해석 반복문은 특정 횟수(for), 특정 조건(while)을 달성할 때 까지 \u0026lsquo;반복\u0026rsquo;하는 문(statement)이다.\n각종 설명 [[조건문(conditional statement)]]{조건문}에는 if문, switch문이 있고 반복문에는 for문, while문, do-while문이 있다. 제어문 블록이 실행 실행 완료되었을 경우 다시 제어문 처음으로 돌아갈지, 아니면 제어문 블록을 빠져나와 정상 흐름으로 다시 돌아올지는 어떤 제어문을 사용하는냐에 달려 있다. [[조건문(conditional statement)]]{조건문}일 경우는 정상 흐름으로 돌아오지만, 반복문일 경우는 제어문 처음으로 다시 되돌아가 반복 실행한다. (이것이 자바다[1판] p.108)\n팁 대부분 [[순환(recursion)]]으로 대체 할 수 있다. "
            }
    
        ,
            {
                "id": 12,
                "href": "https://coder-shin.github.io/post/%EC%A1%B0%EA%B1%B4%EB%AC%B8conditional-statement/",
                "title": "조건문(conditional statement)",
                "section": "post",
                "date" : "2023.02.16",
                "body": "용어 설명 나의 해석 조건문은 \u0026lsquo;조건\u0026rsquo;에 따라 코드의 실행을 취사선택 할 수 있게 해주는 문(statement)이다.\n각종 설명 조건문에는 if문, switch문이 있고 [[반복문(loop)]]{반복문}에는 for문, while문, do-while문이 있다. 제어문 블록이 실행 실행 완료되었을 경우 다시 제어문 처음으로 돌아갈지, 아니면 제어문 블록을 빠져나와 정상 흐름으로 다시 돌아올지는 어떤 제어문을 사용하는냐에 달려 있다. 조건문일 경우는 정상 흐름으로 돌아오지만, [[반복문(loop)]]{반복문}일 경우는 제어문 처음으로 다시 되돌아가 반복 실행한다. (이것이 자바다[1판] p.108)\n팁 "
            }
    
        ,
            {
                "id": 13,
                "href": "https://coder-shin.github.io/post/%EC%A0%9C%EC%96%B4%EB%AC%B8control-flow-statement/",
                "title": "제어문(control flow statement)",
                "section": "post",
                "date" : "2023.02.16",
                "body": "용어 설명 나의 해석 제어문은 코드의 흐름을 \u0026lsquo;제어\u0026rsquo;하는 문(statement)이다.\n각종 설명 실행 흐름을 개발자가 원하는 방향으로 바꿀 수 있도록 해주는 것이 흐름 제어문이다. 흐름 제어문을 간단히 제어문이라고 한다. \u0026hellip; 제어문의 종류는 [[조건문(conditional statement)]]{조건문}과 [[반복문(loop)]]{반복문}이 있는데, (이것이 자바다[1판] p.108)\n팁 "
            }
    
        ,
            {
                "id": 14,
                "href": "https://coder-shin.github.io/post/%EC%83%81%EC%88%98constant/",
                "title": "상수(constant)",
                "section": "post",
                "date" : "2023.02.16",
                "body": "용어 설명 나의 해석 상수는 변하지 않는 변수이다.\n각종 설명 프로그램에서는 상수를 \u0026ldquo;값을 한 번 저장하면 변경할 수 없는 변수\u0026quot;로 정의 (이것이 자바다[1판]) p.32\n팁 변하지 않는 상수라고? 이게 무슨 헛소리인가. 변수 vs 상수 왠만한 상황에서는 상수를 사용하는 것을 추천한다.\n변수는 언제 변해도 상관이 없기 때문에 첫줄에 사용한 변수와 그 다음 줄의 변수가 100% 동일하다고 보증을 할 수 없다. 그렇기 때문에 코드를 읽을 때에는 정신 집중해서 읽어야만 한다. (물론 코드를 읽을 때는 집중을 해야하지만) 하지만 상수의 경우 첫줄의 상수와 10000번째 줄의 상수가 100% 동일하다고 보장을 할 수 있기 때문에 편안하게 코드를 읽을 수 있다. 고로 될 수 있는한 상수를 사용해서 코드를 작성하는 것이 가독성적인 측면에서 유리하다.\n"
            }
    
        ,
            {
                "id": 15,
                "href": "https://coder-shin.github.io/post/%EB%A6%AC%ED%84%B0%EB%9F%B4literal/",
                "title": "리터럴(literal)",
                "section": "post",
                "date" : "2023.02.16",
                "body": "용어 설명 나의 해석 각종 설명 소스 코드 내에서 직접 입력된 값을 리터럴이라고 부른다. (이것이 자바다[1판]) p.32\n팁 "
            }
    
        ,
            {
                "id": 16,
                "href": "https://coder-shin.github.io/post/java/",
                "title": "java",
                "section": "post",
                "date" : "2023.02.16",
                "body": "팁 "
            }
    
        ,
            {
                "id": 17,
                "href": "https://coder-shin.github.io/post/%EB%B3%80%EC%88%98variable/",
                "title": "변수(variable)",
                "section": "post",
                "date" : "2023.02.16",
                "body": "언어별 비교 [[java]]{Java} 변수는 선언된 블록 내에서만 사용이 가능하다. 변수는 문(statement)을 통해 만들어진 블록 내에서만 사용이 가능하다.\nif(true) { int insideBlockVariable = 10; System.out.println(insideBlockVariable); // 참조 가능 } System.out.println(insideBlockVariable); // 참조 불가 =\u0026gt; 에러 발생 명명법 필수 규칙 규칙 예 첫 번째 글자는 문자이거나 \u0026lsquo;$\u0026rsquo;, \u0026lsquo;_\u0026rsquo; 이어야 하고 숫자로 시작할 수 없다. 가능: person, $likeJquery, _underscore\n불가능: 123hello, #likeInsta 영어 대소문자가 구분 camelCase와camelcase는 다른 변수로 취급된다. 예약어는 변수명으로 사용 할 수 없다. 불가능: while, if 등 관례 규칙 예 첫 문자는 영어 소문자로 시작하며 camel case를 사용한다. hello, helloMyFriend 상수 변수의 이름은 pascal case를 사용해서 작성한다. final MAX_VALUE 용어 설명 나의 해석 변수란 하나의 값을 저장하기 위한 이름을 가진 공간.\n각종 설명 프로그램은 작업을 처라하는 과정에서 필요에 따라 데이터를 메모리에 저장한다. 이때 변수를 사용하는데, 변수(varialbe)는 값을 저장할 수 있는 메모리의 공간을 의미한다. \u0026hellip; 변수에는 복수 개의 값을 저장할 수 없고, 하나의 값만 저장할 수 있다.\n변수란, 하나의 값을 저장할 수 있는 메모리 공간이다.\n(이것이 자바다[1판]) p.30\n팁 명백한 이름의 변수명을 작성 할 것 오늘 내가 작성한 코드는, 다음 날 보면 새롭고, 그 다음 날 보면 무슨 의도로 이렇게 작성했는지 알 수 가 없다. 그렇기 때문에 적어도 명백한 이름의 변수명을 작성해 두어서 다른 사람들에게 코드의 의도를 전하고 더 나아가 미래의 나에게 무슨 의도로 이런 코드를 작성했는지 의도를 전하도록 하자.\n줄임말은 최대한 피해라 예를들어 iLoveHer 이라는 변수명을 ilh라고 줄였다고 가정하자. 코드를 읽는 다른 사람은 iLoveHer인지 iLeaveHere인지 Interscholastic League of Honolulu인지 분간은 할 수가 없다. 좋은 텍스트 에디터나 IDE 있다면, 코드 자동 완성이 됨으로 타이핑이 귀찮다고 줄임말을 쓰는 행위는 삼가하도록 하자. 만약 좋은 텍스트 에디터를 모르겠다면 VSC, vim, Emacs 중에 골라 쓰자. (난 vim이나 emacs 쓸거다.)\n관례적으로 줄임말을 사용하는 변수들은 줄임말을 사용 할 것 예를 들어 for문 안에 사용하는 i와 같이 관례적으로 줄임말을 사용하는 경우는 줄임말을 사용할 것. for문 안의 i를 index라고 표현해도 가독성이 올라가지 않는다. 오히려 내가 i가 index의 약자 인지도 모르는 바보 취급 당하는 것 같아서 자존심이 상하기도 한다.\n"
            }
    
        ,
            {
                "id": 18,
                "href": "https://coder-shin.github.io/post/%EA%B0%81%EC%A2%85-%EC%9A%A9%EC%96%B4-%EB%AA%A8%EC%9D%8C/",
                "title": "각종 용어 모음",
                "section": "post",
                "date" : "2023.02.16",
                "body": "프로그래밍 관련 언어 [[변수(variable)]] [[상수(constant)]] [[리터럴(literal)]] [[제어문(control flow statement)]] [[조건문(conditional statement)]] [[반복문(loop)]] [[순환(recursion)]] "
            }
    
        ,
            {
                "id": 19,
                "href": "https://coder-shin.github.io/post/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0data-structure/",
                "title": "자료구조(data structure)",
                "section": "post",
                "date" : "2023.02.15",
                "body": "팁 "
            }
    
        ,
            {
                "id": 20,
                "href": "https://coder-shin.github.io/post/%EA%B0%81%EC%A2%85-%EC%82%AC%EC%9D%B4%ED%8A%B8-%EB%AA%A8%EC%9D%8C/",
                "title": "각종 사이트 모음",
                "section": "post",
                "date" : "2023.02.15",
                "body": "자료 검색 구글( https://www.google.com ) 유튜브( https://www.youtube.com ) "
            }
    
        ,
            {
                "id": 21,
                "href": "https://coder-shin.github.io/post/book/",
                "title": "book",
                "section": "post",
                "date" : "2023.02.15",
                "body": "ACTIVE SQL 더 쉽게, 더 깊게[1판]\n분야: 데이터베이스 작가: 미크 저 / 김완섭 역 별점: 회독: 0 읽을 타이밍: 장점: 단점: 객체지향 사고 프로세스[5판]\n분야: 설계 작가: 맷 와이스펠드 저 / 박진수 역 별점: 회독: 0 읽을 타이밍: 장점: 단점: C언어로 쉽게 풀어쓴 자료구조[3판]\n분야: 자료구조 + 알고리즘 작가: 천인국, 공용해, 하상호 별점: 회독: 0 읽을 타이밍: 장점: [\u0026ldquo;수학에 대해 깊이 고민\u0026rdquo;] 단점: [\u0026ldquo;연습 문제 해답이 없다.\u0026rdquo;, \u0026ldquo;코딩 스타일이 중구난방이다.\u0026rdquo;, \u0026ldquo;테스트 안 한게 분명하다.\u0026rdquo;] 사용자를 생각하게 하지 마![2판]\n분야: UI/UX 작가: 스티브 크룩 저 / 이미령 역 별점: 회독: 0 읽을 타이밍: 장점: 단점: 이것이 자바다[1판]\n분야: 프로그래밍 언어 작가: 신용권 별점: 회독: 0 읽을 타이밍: 장점: 단점: [\u0026ldquo;기본서임에도 불구하고 자바가 처음 언어인 사람들은 절대로 알 수 없을 것 같은 개념이 조금 많다.\u0026rdquo;] TODO 설계 데이터베이스 프로그래밍 언어 UI/UX 마크업 언어 도구 사고(思考) 네트워크 OS 컴퓨터 자료구조 알고리즘 DONE 프로젝트가 서쪽으로 간 까닭은\n분야: 사고 작가: 다수의 작가 별점: 4 회독: 2 읽을 타이밍: 프로젝트가 잘못된 방향으로 가고 있는 것 같은 경우 장점: [\u0026ldquo;프로젝트가 잘못되고 있는 여러 패턴을 확인 가능.\u0026rdquo;] 단점: [\u0026ldquo;해결 방법이 명확하지 않음\u0026rdquo;] 함께 자라기\n분야: 사고 작가: 김창준 별점: 5 회독: 3 읽을 타이밍: 개인적으로 노력해서 기술적으로 상당한 레벨까지 도달했다고 느꼈을 때 장점: [\u0026ldquo;다른 사람들과 함께 성장한다는 의미를 알려준다.\u0026rdquo;, \u0026ldquo;혼자만으로는 한계가 있다는 점을 알려준다.\u0026rdquo;] 단점: [\u0026ldquo;없다.\u0026rdquo;, \u0026ldquo;혼자 개발하는 사람 아니면 당장 서점으로 달려가서 사도록.\u0026rdquo;] 대체 뭐가 문제야\n분야: 사고 작가: 제럴드 M. 와인버그 별점: 5 회독: 3 읽을 타이밍: 새로운 방식으로 생각하고 싶은 경우 장점: [\u0026ldquo;문제에 대한 새로운 시각으로 접근 가능.\u0026rdquo;] 단점: [\u0026ldquo;없다.\u0026rdquo;, \u0026ldquo;개발자가 아니라도 당장 서점으로 달려가서 사도록.\u0026rdquo;] 그로스 해킹\n분야: 사고 작가: 라이언 홀리데이 별점: 4 회독: 2 읽을 타이밍: 어떠한 서비스를 만들고 싶은 경우 장점: [\u0026ldquo;얇기 때문에 그로스 해킹이 핵심 내용만 쉽게 알 수 있음\u0026rdquo;] 단점: [\u0026ldquo;얇기 때문에 더욱 깊은 내용은 별도의 조사로 찾아봐야 함\u0026rdquo;] "
            }
    
        ,
            {
                "id": 22,
                "href": "https://coder-shin.github.io/post/javascript/",
                "title": "javascript",
                "section": "post",
                "date" : "2023.02.14",
                "body": "팁 [[javascript를 이용해서 사용자가 어떤 디바이스를 사용해서 접속하고 있는지 알아보기]] "
            }
    
        ,
            {
                "id": 23,
                "href": "https://coder-shin.github.io/post/home/",
                "title": "index",
                "section": "post",
                "date" : "2023.02.14",
                "body": "프로그래밍 언어(programming language) [[javascript]]{JavaScript} [[java]]{Java} [[c]]{C} 데이터베이스(database) [[database]]{Database} 컴퓨터 기초(computer basic) [[자료구조(data structure)]] [[각종 용어 모음]] 정보 [[book]] [[각종 사이트 모음]] "
            }
    
        ,
            {
                "id": 24,
                "href": "https://coder-shin.github.io/about/",
                "title": "코더 신씨",
                "section": "",
                "date" : "0001.01.01",
                "body": "Me 웹 어플리케이션 개발자입니다. 하드웨어는 키보드에만 관심있습니다. 소프트웨어는 기본적으로 TUI를 선호합니다. 변하지 않는 지식을 배우기 위해 노력 중입니다. Skills 아래의 내용은 어디까지나 주관적인 판단입니다. Javascript =\u0026gt; 구글신 없이도 왠만한 질문은 다 대답할 수 있습니다. Java =\u0026gt; 구글신과 함께라면 잘 할 수 있습니다. SQL =\u0026gt; 구글신과 함께라도 모르는게 많습니다. Shell =\u0026gt; Shell은 나의 친구! Back-end =\u0026gt; 회사 사람들이 너무 잘해서, 오히려 모르는게 많습니다. Front-end =\u0026gt; 회사 사람들이 많이 질문해 주셔서, 여러 상황에 대응 가능합니다. Database =\u0026gt; 회사 사람들이 정말 너무 잘해서, 거의 모릅니다.(최근 공부 중 입니다.) UI/UX =\u0026gt; 회사 사람들 중 할 수 있는 사람이 없어서, 제가 공부 중 입니다. Blog 블로그의 모든 글은 WTFPL 라이선스 적용됩니다. 복사해서 다른 곳으로 옮기고 싶으면 마음껏 옮기세요. 틀린 내용이 있으면 지적 해주세요. Experience 2023 프로젝트 관리용 웹 어플리케이션 개발(angular, spring) 2022 프로젝트 관리용 웹 어플리케이션 개발(angular, spring) 자사 웹 어플리케이션 개발(vue, spring) 자사 웹 페이지 갱신(vue, spring) 채용 관련 웹 어플리케이션 보수 및 개발(spring) 2021 자사 웹 어플리케이션 개발(vue, spring) 소규모 식당 페이지 작성(vue, go) 채용 관련 웹 어플리케이션 보수 및 개발(spring) 2020 대규모 프로젝트 개발(ruby on rails) 사내 교육 2019 사내 교육 "
            }
    
]
